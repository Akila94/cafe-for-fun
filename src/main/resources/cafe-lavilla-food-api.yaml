swagger: '2.0'

info:
  title: Cafe Lavilla Food API
  description: >
    APIs for handling food in Cafe Lavilla.
  version: 1.0.0
schemes:
  - http
  - https
host: localhost

basePath: /lavilla

consumes:
  - application/json
produces:
  - application/json
paths:
  /menu/categories:
    get:
      operationId: getCategories
      summary: Gets all food categories
      description: >
        This API is used to get all food categories
      tags:
        - Getting All Food Categories
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Category'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/Error'
  /menu/category:
    post:
      operationId: setFoodItem
      summary: Adds a food item of a given category
      description: >
        This API is used to add a food item of a given category
      tags:
        - Food Items
      parameters:
        - in: body
          name: body
          description: "Adding food item"
          schema:
            $ref: '#/definitions/FoodDetails'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/FoodDetails'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/Error'
    put:
      operationId: updateFoodItem
      summary: Updates the food item of a given id and a category.
      description: >
        This API is used to update a given food item of a given category
      tags:
      - Food Items
      parameters:
      - in: body
        name: body
        description: Details of the food item to be updated.
        required: true
        schema:
          $ref: '#/definitions/FoodDetails'
      responses:
        200:
          description: Updated food item successfully
        400:
          description: Invalid food item supplied
        404:
          description: Food item not found

  /menu/item/configuration:
    post:
      summary: "Add items"
      description: "Adding food item details to the database"
      parameters:
        - in: "body"
          name: "foodItem"
          description: "Details of the food item to be stored in database"
          required: true
          schema:
            $ref: '#/definitions/FoodDetails'
      responses:
        201:
          description: "Successfully added the food item to the database"
          schema:
            $ref: '#/definitions/FoodDetails'
        400:
          description: "Bad request"
          schema:
            $ref: '#/definitions/Error'

  /menu/{category}:
    get:
      operationId: getItemsByCategory
      summary: Gets all the foods of the provided category
      description: >
        This API is used to get all the food items of the given category
      tags:
      - Food Categories
      parameters:
      - in: path
        name: category
        description: Food category that is needed
        type: integer
        required: true
      responses:
        200:
          description: Successfully obtained food item of given category
          schema:
            $ref: '#/definitions/Group'
        404:
          description: Provided category not found

  /menu/items/{id}:
    get:
      operationId: getFoodItem
      summary: Get the food item of a given id and a category
      description: >
        This API is used to get a food item for the given id and category
      tags:
      - Food Items
      parameters:
#      - in: path
#        name: category
#        description: Category of the food
#        required: true
#        type: string
      - in: path
        name: id
        description: Id of the food item to get
        required: true
        type: integer
      responses:
        200:
          description: Successfully obtained the given food item
          schema:
            $ref: '#/definitions/FoodDetails'
        400:
          description: Invalid food id supplied
        404:
          description: Supplied food item not found
    delete:
      operationId: deleteFoodItem
      summary: Deletes the given food item of the given category
      description: >
        This API is used to delete a given food item of given category
      tags:
      - Food Items
      parameters:
#      - in: path
#        name: category
#        description: Category of the food item
#        required: true
#        type: string
      - in: path
        name: id
        description: Id of the food item to be deleted
        required: true
        type: integer
      responses:
        200:
          description: Food item deleted successfully
        404:
         description: Food item not found

  /menu/image/upload/tmp:
    post:
      summary: Adds an image for a food item
      tags:
        - Image Upload
      consumes:
        - multipart/form-data

      description: >
        This API adds an image to a food item
      parameters:
        - in: formData
          name: image
          type: file
          description: The image to be uploaded
#        - in: path
#          name: name
#          type: string
#          required: true
#          description: The name of the image to be uploaded
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Image'
    put:
      summary: Updates the image of a food item
      tags:
        - Image Upload
      consumes:
        - multipart/form-data
      description: >
        This API updates the image of a food item
      parameters:
        - in: formData
          name: image
          type: file
          description: The image to be updated
#        - in: path
#          name: name
#          type: string
#          required: true
#          description: The name of the image to be updated
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Success'

  /menu/items/categories:
    get:
      summary: Get all the categories
      description: >
        This API gets all the categories
      tags:
        -  Food Categories
      responses:
        200:
          description: OK
          schema:
            properties:
              categoryList:
                type: array
                items:
                  $ref: '#/definitions/CategoryDetails'
        400:
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Internal server error
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: Add an item category
      tags:
        -  Food Categories
      parameters:
        - in: body
          name: category
          required: true
          schema:
            $ref: '#/definitions/CategoryDetails'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/CategoryDetails'
        400:
          description: invalid category type
          schema:
            $ref: '#/definitions/Error'
        500:
          description: internal server error
          schema:
            $ref: '#/definitions/Error'
    put:
      summary: Update an item category
      tags:
        -  Food Categories
      parameters:
        - in: body
          name: category
          required: true
          schema:
            $ref: '#/definitions/CategoryDetails'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/CategoryDetails'
        400:
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Internal server error
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: Delete an item category
      tags:
        -  Food Categories
      parameters:
        - in: body
          name: category
          required: true
          schema:
            $ref: '#/definitions/CategoryDetails'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/CategoryDetails'
        400:
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Internal server error
          schema:
            $ref: '#/definitions/Error'
definitions:
  Success:
    type: object
    required:
      - successMessage
        successCode
    properties:
      succassMessage:
        type: string
        example: Success
      successCode:
        type: integer
        example: 200
  Error:
    type: object
    required:
      - errorCode
        errorCause
        errorMessage
    properties:
      errorCode:
        type: string
        example: '404'
      errorCause:
        type: string
        example: Cause of the error comes here!!
      errorMessage:
        type: string
        example: Error message comes here!!
  Category:
    properties:
      itemsByCategory:
        type: array
        items:
          $ref: '#/definitions/Categories'
  Categories:
    type: object
    required:
      - categoryId
        categoryName
    properties:
      categoryId:
        type: integer
        example: 1
      categoryName:
        type: string
        example: "Salads"
      items:
        type: array
        items:
          $ref: '#/definitions/FoodDetails'
  FoodDetails:
    type: object
    required:
      - categoryId
        category
        itemId
        title
        description
        price
        imageSource
    properties:
      categoryId:
        type: integer
        example: 1
      category:
        type: string
        example: "salad"
      itemId:
        type: integer
        example: 1
      title:
        type: string
        example: "Food Name"
      description:
        type: string
        example: "This is the Food Name"
      price:
        type: integer
        example: 100
      imageSource:
        type: string
        example: "https://localhost:8080/image"
  Group:
    type: array
    items:
      $ref: '#/definitions/FoodDetails'
  Image:
    type: object
    required:
      - imageUrl
    properties:
      imageUrl:
        type: string
        example: localhost:8080/image/soup.jpg
      imageName:
        type: string
        example: test.jpeg
  CategoryDetails:
    type: object
    required:
      - categoryName
        categoryId
    properties:
      categoryId:
        type: integer
        example: 1
      categoryName:
        type: string
        example: "Salads"
